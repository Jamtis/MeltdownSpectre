{"function" : { "sourceId": -1, "functionName": "StoreFastElementStub" , "sourceName": "", "sourceText": "", "startPosition": 0, "endPosition": 0},
"phases":[{"name":"Machine","type":"graph","data":{
"nodes":[{"id":7,"label":"End","title":"End","live": true,"properties":"NoRead, NoWrite, NoThrow, NoDeopt","opcode":"End","control":true,"opinfo":"0 v 0 eff 0 ctrl in, 0 v 0 eff 0 ctrl out"}
],
"edges":[
]}},
{"name":"schedule","type":"schedule","data":"--- BLOCK B0 ---\n  1: Parameter[0](0)\n  2: Parameter[1](0)\n  3: Parameter[2](0)\n  4: Parameter[3](0)\n  5: Parameter[4](0)\n  6: Parameter[5](0)\n  8: Int64Constant[15]\n  9: Load[kRepTagged|kTypeAny](1, 8)\n  10: Int64Constant[0]\n  11: Int64Constant[1]\n  12: Word64And(2, 11)\n  13: Word64Equal(12, 10)\n  14: Branch[None|NoSafetyCheck](13) -> B6, B1\n--- BLOCK B1 <- B0 ---\n  15: Int64Constant[-1]\n  16: Load[kRepTagged|kTypeAny](2, 15)\n  17: HeapConstant[0x022e2cb02641 <Map[16]>]\n  18: Word64Equal(16, 17)\n  19: Branch[None|NoSafetyCheck](18) -> B3, B2\n--- BLOCK B2 <- B1 ---\n  Goto -> B22\n--- BLOCK B3 <- B1 ---\n  20: Int64Constant[7]\n  21: Load[kRepFloat64|kTypeNumber](2, 20)\n  22: RoundFloat64ToInt32(21)\n  23: ChangeInt32ToFloat64(22)\n  24: Float64Equal(21, 23)\n  25: Branch[None|NoSafetyCheck](24) -> B5, B4\n--- BLOCK B4 <- B3 ---\n  Goto -> B22\n--- BLOCK B5 <- B3 ---\n  26: ChangeInt32ToInt64(22)\n  Goto -> B7\n--- BLOCK B6 <- B0 ---\n  27: Int64Constant[32]\n  28: Word64Sar(2, 27)\n  Goto -> B7\n--- BLOCK B7 <- B5, B6 ---\n  29: Phi[kRepWord64](26, 28, 0)\n  Goto -> B8\n--- BLOCK B8 <- B7, B11 ---\n  30: Phi[kRepTagged](3, 55, 0)\n  31: Int64Constant[0]\n  32: Int64Constant[1]\n  33: Word64And(30, 32)\n  34: Word64Equal(33, 31)\n  35: Branch[None|NoSafetyCheck](34) -> B15, B9\n--- BLOCK B9 <- B8 ---\n  36: Int64Constant[-1]\n  37: Load[kRepTagged|kTypeAny](30, 36)\n  38: HeapConstant[0x022e2cb02641 <Map[16]>]\n  39: Word64Equal(37, 38)\n  40: Branch[None|NoSafetyCheck](39) -> B13, B10\n--- BLOCK B10 <- B9 ---\n  41: Int64Constant[-1]\n  42: Load[kRepTagged|kTypeAny](30, 41)\n  43: Int64Constant[11]\n  44: Load[kRepWord16|kTypeUint32](42, 43)\n  45: Int32Constant[131]\n  46: Word32Equal(44, 45)\n  47: Branch[None|NoSafetyCheck](46) -> B12, B11\n--- BLOCK B11 <- B10 ---\n  54: HeapConstant[0x2ad020e90d21 <Code BUILTIN NonNumberToNumber>]\n  55: Call[Code:TypeConversion Descriptor:r1s0i3f0](54, 3, 6)\n  Goto -> B8\n--- BLOCK B12 <- B10 ---\n  Goto -> B14\n--- BLOCK B13 <- B9 ---\n  Goto -> B14\n--- BLOCK B14 <- B13, B12 ---\n  48: Int64Constant[7]\n  49: Load[kRepFloat64|kTypeNumber](30, 48)\n  50: TruncateFloat64ToWord32(49)\n  Goto -> B16\n--- BLOCK B15 <- B8 ---\n  51: Int64Constant[32]\n  52: Word64Sar(30, 51)\n  53: TruncateInt64ToInt32(52)\n  Goto -> B16\n--- BLOCK B16 <- B14, B15 ---\n  56: Phi[kRepWord32](50, 53, 0)\n  57: Int64Constant[23]\n  58: Load[kRepTagged|kTypeAny](1, 57)\n  59: Int64Constant[39]\n  60: Load[kRepWord32|kTypeUint32](58, 59)\n  61: Int32Constant[0]\n  62: Int32Constant[8]\n  63: Word32And(60, 62)\n  64: Word32Equal(63, 61)\n  65: Int32Constant[0]\n  66: Word32Equal(64, 65)\n  67: Branch[None|NoSafetyCheck](66) -> B21, B17\n--- BLOCK B17 <- B16 ---\n  68: Int64Constant[47]\n  69: Load[kRepTagged|kTypeAny](1, 68)\n  70: Int64Constant[32]\n  71: Word64Sar(69, 70)\n  72: Uint64LessThan(29, 71)\n  73: Branch[None|NoSafetyCheck](72) -> B19, B18\n--- BLOCK B18 <- B17 ---\n  Goto -> B20\n--- BLOCK B19 <- B17 ---\n  74: Int64Constant[23]\n  75: Load[kRepWord64](9, 74)\n  76: Int64Constant[15]\n  77: Load[kRepTagged|kTypeAny](9, 76)\n  78: Int64Add(75, 77)\n  79: Int64Constant[2]\n  80: Word64Shl(29, 79)\n  81: Int64Constant[0]\n  82: Store[(kRepWord32 : NoWriteBarrier)](78, 80, 56)\n  Goto -> B20\n--- BLOCK B20 <- B18, B19 ---\n  83: Int32Constant[0]\n  84: Return(83, 3) -> B23\n--- BLOCK B21 <- B16 ---\n  Goto -> B22\n--- BLOCK B22 <- B2, B4, B21 ---\n  85: Int32Constant[5]\n  86: HeapConstant[0x2ad020ecfac1 <Code BUILTIN CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit>]\n  87: ExternalConstant[0xf8cdd0<KeyedStoreIC_Miss.entry>]\n  88: TailCall[Code:KeyedStoreIC_Miss:r1s5i9f0](86, 3, 4, 5, 1, 2, 87, 85, 6) -> B23\n--- BLOCK B23 <- B20, B22 ---\n"},
{"name":"select instructions","type":"instructions", "nodeIdToInstructionRange": {"1": [0, 1], "2": [1, 2], "3": [2, 3], "4": [3, 4], "5": [4, 5], "6": [5, 6], "8": [6, 6], "9": [6, 7], "10": [7, 7], "11": [7, 7], "12": [7, 7], "13": [7, 7], "14": [7, 8], "15": [8, 8], "16": [8, 9], "17": [9, 9], "18": [9, 9], "19": [9, 10], "20": [11, 11], "21": [11, 12], "22": [12, 13], "23": [13, 14], "24": [14, 14], "25": [14, 15], "26": [16, 17], "27": [18, 18], "28": [18, 19], "29": [20, 20], "30": [21, 21], "31": [21, 21], "32": [21, 21], "33": [21, 21], "34": [21, 21], "35": [21, 22], "36": [22, 22], "37": [22, 23], "38": [23, 23], "39": [23, 23], "40": [23, 24], "41": [24, 24], "42": [24, 25], "43": [25, 25], "44": [25, 25], "45": [25, 25], "46": [25, 25], "47": [25, 26], "48": [30, 30], "49": [30, 31], "50": [31, 32], "51": [33, 33], "52": [33, 33], "53": [33, 34], "54": [26, 26], "55": [26, 27], "56": [35, 35], "57": [35, 35], "58": [35, 36], "59": [36, 36], "60": [36, 36], "61": [36, 36], "62": [36, 36], "63": [36, 36], "64": [36, 36], "65": [36, 36], "66": [36, 36], "67": [36, 37], "68": [37, 37], "69": [37, 37], "70": [37, 37], "71": [37, 38], "72": [38, 38], "73": [38, 39], "74": [40, 40], "75": [40, 41], "76": [41, 41], "77": [41, 42], "78": [42, 43], "79": [43, 43], "80": [43, 43], "81": [43, 43], "82": [43, 44], "83": [45, 45], "84": [45, 46], "85": [47, 48], "86": [48, 48], "87": [48, 49], "88": [49, 52]}, "blockIdtoInstructionRange": {"0": [0, 8], "1": [8, 10], "2": [10, 11], "3": [11, 15], "4": [15, 16], "5": [16, 18], "6": [18, 20], "7": [20, 21], "8": [21, 22], "9": [22, 24], "10": [24, 26], "11": [26, 28], "12": [28, 29], "13": [29, 30], "14": [30, 33], "15": [33, 35], "16": [35, 37], "17": [37, 39], "18": [39, 40], "19": [40, 45], "20": [45, 46], "21": [46, 47], "22": [47, 52], "23": [52, 53]}},
{"name":"code generation", "type":"instructions", "instructionOffsetToPCOffset": {"0":10, "1":10, "2":10, "3":10, "4":10, "5":10, "6":10, "7":14, "8":51, "9":55, "10":65, "11":73, "12":78, "13":82, "14":91, "15":103, "16":111, "17":114, "18":119, "19":126, "20":126, "21":144, "22":154, "23":158, "24":168, "25":172, "26":186, "27":197, "28":234, "29":234, "30":234, "31":240, "32":257, "33":262, "34":266, "35":269, "36":277, "37":287, "38":291, "39":304, "40":304, "41":312, "42":316, "43":319, "44":322, "45":322, "46":331, "47":331, "48":331, "49":331, "50":331, "51":335, "52":419}},
{"name":"disassembly","type":"disassembly", "blockIdToOffset": {"0":0, "1":51, "2":65, "3":73, "4":103, "5":111, "6":119, "7":126, "8":144, "9":154, "10":168, "11":186, "12":234, "13":234, "14":234, "15":262, "16":269, "17":287, "18":304, "19":304, "20":322, "21":331, "22":331, "23":419},"data":"kind = STUB\nmajor_key = StoreFastElementStub\nminor_key = 126\nname = StoreFastElementStub\ncompiler = turbofan\naddress = 0x2ad020f79d21\n\nInstructions (size = 448)\n0x2ad020f79d60     0  55             push rbp\n0x2ad020f79d61     1  4889e5         REX.W movq rbp,rsp\n0x2ad020f79d64     4  6a18           push 0x18\n0x2ad020f79d66     6  4883ec40       REX.W subq rsp,0x40\n0x2ad020f79d6a     a  4c8b420f       REX.W movq r8,[rdx+0xf]\n0x2ad020f79d6e     e  488955d8       REX.W movq [rbp-0x28],rdx\n0x2ad020f79d72    12  48894dd0       REX.W movq [rbp-0x30],rcx\n0x2ad020f79d76    16  488945f0       REX.W movq [rbp-0x10],rax\n0x2ad020f79d7a    1a  48897de8       REX.W movq [rbp-0x18],rdi\n0x2ad020f79d7e    1e  48895de0       REX.W movq [rbp-0x20],rbx\n0x2ad020f79d82    22  488975c8       REX.W movq [rbp-0x38],rsi\n0x2ad020f79d86    26  4c8945b8       REX.W movq [rbp-0x48],r8\n0x2ad020f79d8a    2a  f6c101         testb rcx,0x1\n0x2ad020f79d8d    2d  0f8444000000   jz 0x2ad020f79dd7  <+0x77>\n0x2ad020f79d93    33  4c8b49ff       REX.W movq r9,[rcx-0x1]\n0x2ad020f79d97    37  4d394d48       REX.W cmpq [r13+0x48] (root (0x022e2cb02641 <Map[16]>)),r9\n0x2ad020f79d9b    3b  0f8408000000   jz 0x2ad020f79da9  <+0x49>\n0x2ad020f79da1    41  488bda         REX.W movq rbx,rdx\n0x2ad020f79da4    44  e902010000     jmp 0x2ad020f79eab  <+0x14b>\n0x2ad020f79da9    49  c5fb104107     vmovsd xmm0,[rcx+0x7]\n0x2ad020f79dae    4e  c57b2cc8       vcvttsd2si r9,xmm0\n0x2ad020f79db2    52  c5f157c9       vxorpd xmm1,xmm1,xmm1\n0x2ad020f79db6    56  c4c1732ac9     vcvtlsi2sd xmm1,xmm1,r9\n0x2ad020f79dbb    5b  c5f92ec8       vucomisd xmm1,xmm0\n0x2ad020f79dbf    5f  7a06           jpe 0x2ad020f79dc7  <+0x67>\n0x2ad020f79dc1    61  0f8408000000   jz 0x2ad020f79dcf  <+0x6f>\n0x2ad020f79dc7    67  488bda         REX.W movq rbx,rdx\n0x2ad020f79dca    6a  e9dc000000     jmp 0x2ad020f79eab  <+0x14b>\n0x2ad020f79dcf    6f  4d63c9         REX.W movsxlq r9,r9\n0x2ad020f79dd2    72  e907000000     jmp 0x2ad020f79dde  <+0x7e>\n0x2ad020f79dd7    77  4c8bc9         REX.W movq r9,rcx\n0x2ad020f79dda    7a  49c1f920       REX.W sarq r9, 32\n0x2ad020f79dde    7e  4c894dc0       REX.W movq [rbp-0x40],r9\n0x2ad020f79de2    82  4c8bd8         REX.W movq r11,rax\n0x2ad020f79de5    85  6666660f1f840000000000 nop\n0x2ad020f79df0    90  41f6c301       testb r11,0x1\n0x2ad020f79df4    94  0f846c000000   jz 0x2ad020f79e66  <+0x106>\n0x2ad020f79dfa    9a  4d8b63ff       REX.W movq r12,[r11-0x1]\n0x2ad020f79dfe    9e  4d396548       REX.W cmpq [r13+0x48] (root (0x022e2cb02641 <Map[16]>)),r12\n0x2ad020f79e02    a2  0f8442000000   jz 0x2ad020f79e4a  <+0xea>\n0x2ad020f79e08    a8  4d8b63ff       REX.W movq r12,[r11-0x1]\n0x2ad020f79e0c    ac  6641817c240b8300 cmpw [r12+0xb],0x83\n0x2ad020f79e14    b4  0f8430000000   jz 0x2ad020f79e4a  <+0xea>\n0x2ad020f79e1a    ba  4c8be6         REX.W movq r12,rsi\n0x2ad020f79e1d    bd  4c8bd8         REX.W movq r11,rax\n0x2ad020f79e20    c0  e83b6ff1ff     call 0x2ad020e90d60  (NonNumberToNumber)    ;; code: Builtin::NonNumberToNumber\n0x2ad020f79e25    c5  4c8bd8         REX.W movq r11,rax\n0x2ad020f79e28    c8  488b45f0       REX.W movq rax,[rbp-0x10]\n0x2ad020f79e2c    cc  488b7de8       REX.W movq rdi,[rbp-0x18]\n0x2ad020f79e30    d0  488b5de0       REX.W movq rbx,[rbp-0x20]\n0x2ad020f79e34    d4  488b55d8       REX.W movq rdx,[rbp-0x28]\n0x2ad020f79e38    d8  488b4dd0       REX.W movq rcx,[rbp-0x30]\n0x2ad020f79e3c    dc  488b75c8       REX.W movq rsi,[rbp-0x38]\n0x2ad020f79e40    e0  4c8b4dc0       REX.W movq r9,[rbp-0x40]\n0x2ad020f79e44    e4  4c8b45b8       REX.W movq r8,[rbp-0x48]\n0x2ad020f79e48    e8  eba6           jmp 0x2ad020f79df0  <+0x90>\n0x2ad020f79e4a    ea  c4c17b104307   vmovsd xmm0,[r11+0x7]\n0x2ad020f79e50    f0  c4e1fb2cc0     vcvttsd2siq rax,xmm0\n0x2ad020f79e55    f5  4883f801       REX.W cmpq rax,0x1\n0x2ad020f79e59    f9  0f80a4000000   jo 0x2ad020f79f03  <+0x1a3>\n0x2ad020f79e5f    ff  8bc0           movl rax,rax\n0x2ad020f79e61   101  e907000000     jmp 0x2ad020f79e6d  <+0x10d>\n0x2ad020f79e66   106  49c1eb20       REX.W shrq r11, 32\n0x2ad020f79e6a   10a  498bc3         REX.W movq rax,r11\n0x2ad020f79e6d   10d  488b5dd8       REX.W movq rbx,[rbp-0x28]\n0x2ad020f79e71   111  488b5317       REX.W movq rdx,[rbx+0x17]\n0x2ad020f79e75   115  f6422708       testb [rdx+0x27],0x8\n0x2ad020f79e79   119  0f852c000000   jnz 0x2ad020f79eab  <+0x14b>\n0x2ad020f79e7f   11f  48635b33       REX.W movsxlq rbx,[rbx+0x33]\n0x2ad020f79e83   123  488b55c0       REX.W movq rdx,[rbp-0x40]\n0x2ad020f79e87   127  483bd3         REX.W cmpq rdx,rbx\n0x2ad020f79e8a   12a  0f8312000000   jnc 0x2ad020f79ea2  <+0x142>\n0x2ad020f79e90   130  488b5db8       REX.W movq rbx,[rbp-0x48]\n0x2ad020f79e94   134  488b4b17       REX.W movq rcx,[rbx+0x17]\n0x2ad020f79e98   138  488b5b0f       REX.W movq rbx,[rbx+0xf]\n0x2ad020f79e9c   13c  4803d9         REX.W addq rbx,rcx\n0x2ad020f79e9f   13f  890493         movl [rbx+rdx*4],rax\n0x2ad020f79ea2   142  488b45f0       REX.W movq rax,[rbp-0x10]\n0x2ad020f79ea6   146  488be5         REX.W movq rsp,rbp\n0x2ad020f79ea9   149  5d             pop rbp\n0x2ad020f79eaa   14a  c3             retl\n0x2ad020f79eab   14b  488b6d00       REX.W movq rbp,[rbp+0x0]\n0x2ad020f79eaf   14f  4c8b542428     REX.W movq r10,[rsp+0x28]\n0x2ad020f79eb4   154  4c89542440     REX.W movq [rsp+0x40],r10\n0x2ad020f79eb9   159  4c8b542450     REX.W movq r10,[rsp+0x50]\n0x2ad020f79ebe   15e  4c89542428     REX.W movq [rsp+0x28],r10\n0x2ad020f79ec3   163  488b742410     REX.W movq rsi,[rsp+0x10]\n0x2ad020f79ec8   168  4c8b542438     REX.W movq r10,[rsp+0x38]\n0x2ad020f79ecd   16d  4c89542450     REX.W movq [rsp+0x50],r10\n0x2ad020f79ed2   172  4c8b542430     REX.W movq r10,[rsp+0x30]\n0x2ad020f79ed7   177  4c89542448     REX.W movq [rsp+0x48],r10\n0x2ad020f79edc   17c  48895c2438     REX.W movq [rsp+0x38],rbx\n0x2ad020f79ee1   181  4c8b542418     REX.W movq r10,[rsp+0x18]\n0x2ad020f79ee6   186  4c89542430     REX.W movq [rsp+0x30],r10\n0x2ad020f79eeb   18b  48bbd0cdf80000000000 REX.W movq rbx,0xf8cdd0\n0x2ad020f79ef5   195  b805000000     movl rax,0x5\n0x2ad020f79efa   19a  4883c428       REX.W addq rsp,0x28\n0x2ad020f79efe   19e  e9fd5bf5ff     jmp 0x2ad020ecfb00  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; code: Builtin::CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit\n0x2ad020f79f03   1a3  4883ec08       REX.W subq rsp,0x8\n0x2ad020f79f07   1a7  c5fb110424     vmovsd [rsp],xmm0\n0x2ad020f79f0c   1ac  e88f90f5ff     call 0x2ad020ed2fa0  (DoubleToI)    ;; code: Builtin::DoubleToI\n0x2ad020f79f11   1b1  8b0424         movl rax,[rsp]\n0x2ad020f79f14   1b4  4883c408       REX.W addq rsp,0x8\n0x2ad020f79f18   1b8  e942ffffff     jmp 0x2ad020f79e5f  <+0xff>\n0x2ad020f79f1d   1bd  90             nop\n0x2ad020f79f1e   1be  6690           nop\n\n\nSafepoints (size = 24)\n0x2ad020f79e25      c5    NA  10111101000 (sp -> fp)  <none>\n\nRelocInfo (size = 7)\n0x2ad020f79e21  code target (BUILTIN NonNumberToNumber)  (0x2ad020e90d60)\n0x2ad020f79eff  code target (BUILTIN CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)  (0x2ad020ecfb00)\n0x2ad020f79f0d  code target (BUILTIN DoubleToI)  (0x2ad020ed2fa0)\n\n"}
],
"nodePositions":{},
"NodeOrigins" : {},
"sources" : {"-1" : { "sourceId": -1, "functionName": "" , "sourceName": "", "sourceText": "", "startPosition": 0, "endPosition": 0}}, "inlinings" : {}
}